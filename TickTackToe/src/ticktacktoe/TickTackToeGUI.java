/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ticktacktoe;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author claud
 */
public class TickTackToeGUI extends javax.swing.JFrame {

    char gameMatrix[][] = new char[4][4];
    ;
   boolean gameHasEnded = false;

    /**
     * Creates new form TickTackToeGUI
     */
    public TickTackToeGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gamePanel = new javax.swing.JPanel();
        upperPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        lowerPanel = new javax.swing.JPanel();
        winsLabel = new javax.swing.JLabel();
        losesLabel = new javax.swing.JLabel();
        percentageLabel = new javax.swing.JLabel();
        middlePanel = new javax.swing.JPanel();
        b11 = new javax.swing.JButton();
        b12 = new javax.swing.JButton();
        b13 = new javax.swing.JButton();
        b21 = new javax.swing.JButton();
        b22 = new javax.swing.JButton();
        b23 = new javax.swing.JButton();
        b31 = new javax.swing.JButton();
        b32 = new javax.swing.JButton();
        b33 = new javax.swing.JButton();
        mainMenuPanel = new javax.swing.JPanel();
        newGameButton = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        loadGameButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        gamePanel.setVisible(false);
        gamePanel.setPreferredSize(new java.awt.Dimension(800, 600));
        gamePanel.setLayout(new java.awt.BorderLayout());

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout upperPanelLayout = new javax.swing.GroupLayout(upperPanel);
        upperPanel.setLayout(upperPanelLayout);
        upperPanelLayout.setHorizontalGroup(
            upperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, upperPanelLayout.createSequentialGroup()
                .addContainerGap(686, Short.MAX_VALUE)
                .addGroup(upperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saveButton)
                    .addComponent(backButton))
                .addGap(57, 57, 57))
        );
        upperPanelLayout.setVerticalGroup(
            upperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(upperPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(backButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gamePanel.add(upperPanel, java.awt.BorderLayout.PAGE_START);

        winsLabel.setText("Wins:");

        losesLabel.setText("Loses:");

        percentageLabel.setText("%");

        javax.swing.GroupLayout lowerPanelLayout = new javax.swing.GroupLayout(lowerPanel);
        lowerPanel.setLayout(lowerPanelLayout);
        lowerPanelLayout.setHorizontalGroup(
            lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lowerPanelLayout.createSequentialGroup()
                .addGap(242, 242, 242)
                .addComponent(winsLabel)
                .addGap(70, 70, 70)
                .addComponent(losesLabel)
                .addGap(124, 124, 124)
                .addComponent(percentageLabel)
                .addContainerGap(295, Short.MAX_VALUE))
        );
        lowerPanelLayout.setVerticalGroup(
            lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lowerPanelLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(winsLabel)
                    .addComponent(losesLabel)
                    .addComponent(percentageLabel))
                .addGap(36, 36, 36))
        );

        gamePanel.add(lowerPanel, java.awt.BorderLayout.PAGE_END);

        b11.setPreferredSize(new java.awt.Dimension(100, 100));
        b11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b11ActionPerformed(evt);
            }
        });

        b12.setPreferredSize(new java.awt.Dimension(100, 100));
        b12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b12ActionPerformed(evt);
            }
        });

        b13.setPreferredSize(new java.awt.Dimension(100, 100));
        b13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b13ActionPerformed(evt);
            }
        });

        b21.setPreferredSize(new java.awt.Dimension(100, 100));
        b21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b21ActionPerformed(evt);
            }
        });

        b22.setPreferredSize(new java.awt.Dimension(100, 100));
        b22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b22ActionPerformed(evt);
            }
        });

        b23.setPreferredSize(new java.awt.Dimension(100, 100));
        b23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b23ActionPerformed(evt);
            }
        });

        b31.setPreferredSize(new java.awt.Dimension(100, 100));
        b31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b31ActionPerformed(evt);
            }
        });

        b32.setPreferredSize(new java.awt.Dimension(100, 100));
        b32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b32ActionPerformed(evt);
            }
        });

        b33.setPreferredSize(new java.awt.Dimension(100, 100));
        b33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b33ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout middlePanelLayout = new javax.swing.GroupLayout(middlePanel);
        middlePanel.setLayout(middlePanelLayout);
        middlePanelLayout.setHorizontalGroup(
            middlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(middlePanelLayout.createSequentialGroup()
                .addGap(236, 236, 236)
                .addGroup(middlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(middlePanelLayout.createSequentialGroup()
                        .addComponent(b31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(middlePanelLayout.createSequentialGroup()
                        .addComponent(b21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(middlePanelLayout.createSequentialGroup()
                        .addComponent(b11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(244, Short.MAX_VALUE))
        );
        middlePanelLayout.setVerticalGroup(
            middlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(middlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(middlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(b11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(middlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(b21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(middlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(b31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(72, Short.MAX_VALUE))
        );

        gamePanel.add(middlePanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(gamePanel);

        mainMenuPanel.setName(""); // NOI18N
        mainMenuPanel.setPreferredSize(new java.awt.Dimension(800, 600));

        newGameButton.setText("New Game");
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Tele-Marines", 0, 36)); // NOI18N
        title.setText("Tic-Tac-Toe");
        title.setAlignmentX(0.5F);
        title.setAlignmentY(0.0F);

        loadGameButton.setText("Load Game");
        loadGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGameButtonActionPerformed(evt);
            }
        });

        quitButton.setText("Quit ");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainMenuPanelLayout = new javax.swing.GroupLayout(mainMenuPanel);
        mainMenuPanel.setLayout(mainMenuPanelLayout);
        mainMenuPanelLayout.setHorizontalGroup(
            mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainMenuPanelLayout.createSequentialGroup()
                .addContainerGap(235, Short.MAX_VALUE)
                .addComponent(title)
                .addGap(225, 225, 225))
            .addGroup(mainMenuPanelLayout.createSequentialGroup()
                .addGap(360, 360, 360)
                .addGroup(mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadGameButton)
                    .addComponent(newGameButton)
                    .addGroup(mainMenuPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(quitButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainMenuPanelLayout.setVerticalGroup(
            mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuPanelLayout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(title)
                .addGap(94, 94, 94)
                .addComponent(newGameButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadGameButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quitButton)
                .addContainerGap(296, Short.MAX_VALUE))
        );

        getContentPane().add(mainMenuPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
        gamePanel.setVisible(true);
        mainMenuPanel.setVisible(false);

        initializeGameFromFile("newGameFile.txt");
    }//GEN-LAST:event_newGameButtonActionPerformed

    private void b11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b11ActionPerformed
        if (gameMatrix[1][1] == '-' && gameHasEnded == false) {

            b11.setText(Character.toString('X'));
            turn(1, 1);
        }
    }//GEN-LAST:event_b11ActionPerformed

    private void b12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b12ActionPerformed
        if (gameMatrix[1][2] == '-' && gameHasEnded == false) {

            b12.setText(Character.toString('X'));
            turn(1, 2);
        }
    }//GEN-LAST:event_b12ActionPerformed

    private void b13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b13ActionPerformed
        if (gameMatrix[1][3] == '-' && gameHasEnded == false) {

            b13.setText(Character.toString('X'));
            turn(1, 3);
        }
    }//GEN-LAST:event_b13ActionPerformed

    private void b21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b21ActionPerformed
        if (gameMatrix[2][1] == '-' && gameHasEnded == false) {

            b21.setText(Character.toString('X'));
            turn(2, 1);
        }
    }//GEN-LAST:event_b21ActionPerformed

    private void b22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b22ActionPerformed
        if (gameMatrix[2][2] == '-' && gameHasEnded == false) {

            b22.setText(Character.toString('X'));
            turn(2, 2);
        }
    }//GEN-LAST:event_b22ActionPerformed

    private void b23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b23ActionPerformed
        if (gameMatrix[2][3] == '-' && gameHasEnded == false) {

            b23.setText(Character.toString('X'));
            turn(2, 3);
        }
    }//GEN-LAST:event_b23ActionPerformed

    private void b31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b31ActionPerformed
        if (gameMatrix[3][1] == '-' && gameHasEnded == false) {

            b31.setText(Character.toString('X'));
            turn(3, 1);
        }
    }//GEN-LAST:event_b31ActionPerformed

    private void b32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b32ActionPerformed
        if (gameMatrix[3][2] == '-' && gameHasEnded == false) {

            b32.setText(Character.toString('X'));
            turn(3, 2);
        }
    }//GEN-LAST:event_b32ActionPerformed

    private void b33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b33ActionPerformed
        if (gameMatrix[3][3] == '-' && gameHasEnded == false) {

            b33.setText(Character.toString('X'));
            turn(3, 3);
        }
    }//GEN-LAST:event_b33ActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        gamePanel.setVisible(false);
        mainMenuPanel.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGameButtonActionPerformed

    }//GEN-LAST:event_loadGameButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TickTackToeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TickTackToeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TickTackToeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TickTackToeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TickTackToeGUI().setVisible(true);
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b11;
    private javax.swing.JButton b12;
    private javax.swing.JButton b13;
    private javax.swing.JButton b21;
    private javax.swing.JButton b22;
    private javax.swing.JButton b23;
    private javax.swing.JButton b31;
    private javax.swing.JButton b32;
    private javax.swing.JButton b33;
    private javax.swing.JButton backButton;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JButton loadGameButton;
    private javax.swing.JLabel losesLabel;
    private javax.swing.JPanel lowerPanel;
    private javax.swing.JPanel mainMenuPanel;
    private javax.swing.JPanel middlePanel;
    private javax.swing.JButton newGameButton;
    private javax.swing.JLabel percentageLabel;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel title;
    private javax.swing.JPanel upperPanel;
    private javax.swing.JLabel winsLabel;
    // End of variables declaration//GEN-END:variables

    private void initializeGameFromFile(String gameFile) {

        gameHasEnded = false;
        File file = new File(gameFile);
        try (Scanner fs = new Scanner(file)) {
            for (int i = 1; i <= 3; i++) {
                for (int j = 1; j <= 3; j++) {
                    gameMatrix[i][j] = fs.next().charAt(0);
                }
            }
            if (gameMatrix[1][1] != '-') {
                b11.setText(Character.toString(gameMatrix[1][1]));
            } else {
                b11.setText(" ");
            }
            if (gameMatrix[1][2] != '-') {
                b12.setText(Character.toString(gameMatrix[1][2]));
            } else {
                b12.setText(" ");
            }
            if (gameMatrix[1][3] != '-') {
                b13.setText(Character.toString(gameMatrix[1][3]));
            } else {
                b13.setText(" ");
            }
            if (gameMatrix[2][1] != '-') {
                b21.setText(Character.toString(gameMatrix[2][1]));
            } else {
                b21.setText(" ");
            }
            if (gameMatrix[2][2] != '-') {
                b22.setText(Character.toString(gameMatrix[2][2]));
            } else {
                b22.setText(" ");
            }
            if (gameMatrix[2][3] != '-') {
                b23.setText(Character.toString(gameMatrix[2][3]));
            } else {
                b23.setText(" ");
            }
            if (gameMatrix[3][1] != '-') {
                b31.setText(Character.toString(gameMatrix[3][1]));
            } else {
                b31.setText(" ");
            }
            if (gameMatrix[3][2] != '-') {
                b32.setText(Character.toString(gameMatrix[3][2]));
            } else {
                b32.setText(" ");
            }
            if (gameMatrix[3][3] != '-') {
                b33.setText(Character.toString(gameMatrix[3][3]));
            } else {
                b33.setText(" ");
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(TickTackToeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadStatistics();

    }

    private void loadStatistics() {
        File file = new File("statisticsFile.txt");
        try (Scanner fs = new Scanner(file)) {
            int wins = fs.nextInt();
            int loses = fs.nextInt();
            winsLabel.setText("Wins: " + wins);
            losesLabel.setText("Loses: " + loses);
            if (wins + loses == 0) {
                percentageLabel.setText(" 0 %");
            } else {
                percentageLabel.setText((wins * 100 / (wins + loses)) + " %");
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(TickTackToeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean checkIfWon(char player) {
        for (int i = 1; i <= 3; i++) {
            if (gameMatrix[i][1] == gameMatrix[i][2] && gameMatrix[i][2] == gameMatrix[i][3] && gameMatrix[i][1] != '-') {
                return true;
            }
        }
        for (int i = 1; i <= 3; i++) {
            if (gameMatrix[1][i] == gameMatrix[2][i] && gameMatrix[2][i] == gameMatrix[3][i] && gameMatrix[1][i] != '-') {
                return true;
            }
        }
        if (gameMatrix[1][1] == gameMatrix[2][2] && gameMatrix[2][2] == gameMatrix[3][3] && gameMatrix[1][1] != '-') {
            return true;
        }
        if (gameMatrix[1][3] == gameMatrix[2][2] && gameMatrix[2][2] == gameMatrix[3][1] && gameMatrix[1][3] != '-') {
            return true;
        }
        return false;
    }

    private boolean checkIfDraw() {
        int count = 0;
        for (int i = 1; i <= 3; i++) {
            for (int j = 1; j <= 3; j++) {
                if (gameMatrix[i][j] != '-') {
                    count++;
                }
            }
        }
        if (count == 9) {
            return true;
        }
        return false;
    }

    private void turn(int i, int j) {
        if (gameMatrix[i][j] == '-') {
            gameMatrix[i][j] = 'X';
            if (checkIfWon('X') == true) {
                JOptionPane.showMessageDialog(null, "You win!");
                gameHasEnded = true;
                File file = new File("statisticsFile.txt");
                try (Scanner fs = new Scanner(file)) {
                    int win = fs.nextInt();
                    int loses = fs.nextInt();
                    win++;
                    try (PrintWriter wr = new PrintWriter("statisticsFile.txt")) {
                        wr.print(win);
                        wr.print(" ");
                        wr.print(loses);

                    }
                } catch (FileNotFoundException e) {
                    System.out.println("FILE NOT FOUND");
                }
                loadStatistics();
            } else if (checkIfDraw() == false) {
                //pcTurn();
                if (checkIfWon('0') == true) {
                    JOptionPane.showMessageDialog(null, "You loose!");
                    gameHasEnded = true;
                    File file = new File("statisticsFile.txt");
                    try (Scanner fs = new Scanner(file)) {
                        int win = fs.nextInt();
                        int loses = fs.nextInt();
                        loses++;
                        try (PrintWriter wr = new PrintWriter("statisticsFile.txt")) {
                            wr.print(win);
                            wr.print(" ");
                            wr.print(loses);
                        }
                    } catch (FileNotFoundException e) {
                        System.out.println("FILE NOT FOUND");
                    }
                    loadStatistics();
                }
            } else {
                JOptionPane.showMessageDialog(null, "It's a draw!");
            }
        }
    }
}
